spring:
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 442820400228-utk1uej760r2hpn3tuid1k4sqqjqiaco.apps.googleusercontent.com
            client-secret: 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
            scope: profile, email

          naver:
            client-id: 1NkrQfPWeTeD49DHt7Tb
            client-secret: 4lnUtpVtVN
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope: name, email, profile_image
            client-name: Naver

          kakao:
            client-id: 160453935ba3d3f1ed335eb180ca7861
            client-secret: POCqn1MGoKqabRg367BUH7E2ZOw6AkqW
            redirect-uri: http://localhost:8080/login/oauth2/code/kakao
            client-authentication-method: POST
            authorization-grant-type: authorization_code
            scope: profile_nickname
            client-name: Kakao

        provider:
          naver:
            authorization_uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user_name_attribute: response

          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

            # 1. registration 부분 : OAuth 로그인 시 설정한 Application의 정보를 사용하여
            # AccessToken을 Authorization Server에게 발급받을 때 사용

            # 2. provider 부분 : AccessToken을 Authorization Server에게 발급 받은 후,
            # 해당 AccessToken으로 Resource Server의 API를 사용할 때
            # provider 부분의 정보를 사용하여 API 호출